type Node<T> = {
	value: T,
	next?: Node<T>,
	prev?: Node<T>
}

export default class LRU<K, V> {
	private length: number;
	private head?: Node<V>
	private tail?: Node<V>

	constructor() {
		this.length = 0;
	}

	update(key: K, value: V): void {
		// does it exist?

		// if it doesn't we need to insert
		// 	- check capacity and evict if over
		// if it does, we need to update to the front of the list
		// and update the value
	}

	get(key: K): V | undefined {
		// check the cache for existence 

		// update the value we found and move it to the front

		// return out the value found or undefined if not exist
	}
}
